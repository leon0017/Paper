From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: leon-robinson <leonrobi@proton.me>
Date: Sun, 14 Apr 2024 14:29:27 +0100
Subject: [PATCH] Add biome files


diff --git a/src/main/java/net/minecraft/data/worldgen/biome/BiomeData.java b/src/main/java/net/minecraft/data/worldgen/biome/BiomeData.java
new file mode 100644
index 0000000000000000000000000000000000000000..addb19683552ce9f2d69f8b35ece0b54fae1b365
--- /dev/null
+++ b/src/main/java/net/minecraft/data/worldgen/biome/BiomeData.java
@@ -0,0 +1,80 @@
+package net.minecraft.data.worldgen.biome;
+
+import net.minecraft.core.HolderGetter;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.data.worldgen.BootstapContext;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
+import net.minecraft.world.level.levelgen.placement.PlacedFeature;
+
+public abstract class BiomeData {
+    public static void bootstrap(BootstapContext<Biome> biomeRegisterable) {
+        HolderGetter<PlacedFeature> holderGetter = biomeRegisterable.lookup(Registries.PLACED_FEATURE);
+        HolderGetter<ConfiguredWorldCarver<?>> holderGetter2 = biomeRegisterable.lookup(Registries.CONFIGURED_CARVER);
+        biomeRegisterable.register(Biomes.THE_VOID, OverworldBiomes.theVoid(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.PLAINS, OverworldBiomes.plains(holderGetter, holderGetter2, false, false, false));
+        biomeRegisterable.register(Biomes.SUNFLOWER_PLAINS, OverworldBiomes.plains(holderGetter, holderGetter2, true, false, false));
+        biomeRegisterable.register(Biomes.SNOWY_PLAINS, OverworldBiomes.plains(holderGetter, holderGetter2, false, true, false));
+        biomeRegisterable.register(Biomes.ICE_SPIKES, OverworldBiomes.plains(holderGetter, holderGetter2, false, true, true));
+        biomeRegisterable.register(Biomes.DESERT, OverworldBiomes.desert(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.SWAMP, OverworldBiomes.swamp(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.MANGROVE_SWAMP, OverworldBiomes.mangroveSwamp(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.FOREST, OverworldBiomes.forest(holderGetter, holderGetter2, false, false, false));
+        biomeRegisterable.register(Biomes.FLOWER_FOREST, OverworldBiomes.forest(holderGetter, holderGetter2, false, false, true));
+        biomeRegisterable.register(Biomes.BIRCH_FOREST, OverworldBiomes.forest(holderGetter, holderGetter2, true, false, false));
+        biomeRegisterable.register(Biomes.DARK_FOREST, OverworldBiomes.darkForest(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.OLD_GROWTH_BIRCH_FOREST, OverworldBiomes.forest(holderGetter, holderGetter2, true, true, false));
+        biomeRegisterable.register(Biomes.OLD_GROWTH_PINE_TAIGA, OverworldBiomes.oldGrowthTaiga(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.OLD_GROWTH_SPRUCE_TAIGA, OverworldBiomes.oldGrowthTaiga(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.TAIGA, OverworldBiomes.taiga(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.SNOWY_TAIGA, OverworldBiomes.taiga(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.SAVANNA, OverworldBiomes.savanna(holderGetter, holderGetter2, false, false));
+        biomeRegisterable.register(Biomes.SAVANNA_PLATEAU, OverworldBiomes.savanna(holderGetter, holderGetter2, false, true));
+        biomeRegisterable.register(Biomes.WINDSWEPT_HILLS, OverworldBiomes.windsweptHills(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.WINDSWEPT_GRAVELLY_HILLS, OverworldBiomes.windsweptHills(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.WINDSWEPT_FOREST, OverworldBiomes.windsweptHills(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.WINDSWEPT_SAVANNA, OverworldBiomes.savanna(holderGetter, holderGetter2, true, false));
+        biomeRegisterable.register(Biomes.JUNGLE, OverworldBiomes.jungle(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.SPARSE_JUNGLE, OverworldBiomes.sparseJungle(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.BAMBOO_JUNGLE, OverworldBiomes.bambooJungle(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.BADLANDS, OverworldBiomes.badlands(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.ERODED_BADLANDS, OverworldBiomes.badlands(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.WOODED_BADLANDS, OverworldBiomes.badlands(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.MEADOW, OverworldBiomes.meadowOrCherryGrove(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.CHERRY_GROVE, OverworldBiomes.meadowOrCherryGrove(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.GROVE, OverworldBiomes.grove(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.SNOWY_SLOPES, OverworldBiomes.snowySlopes(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.FROZEN_PEAKS, OverworldBiomes.frozenPeaks(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.JAGGED_PEAKS, OverworldBiomes.jaggedPeaks(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.STONY_PEAKS, OverworldBiomes.stonyPeaks(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.RIVER, OverworldBiomes.river(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.FROZEN_RIVER, OverworldBiomes.river(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.BEACH, OverworldBiomes.beach(holderGetter, holderGetter2, false, false));
+        biomeRegisterable.register(Biomes.SNOWY_BEACH, OverworldBiomes.beach(holderGetter, holderGetter2, true, false));
+        biomeRegisterable.register(Biomes.STONY_SHORE, OverworldBiomes.beach(holderGetter, holderGetter2, false, true));
+        biomeRegisterable.register(Biomes.WARM_OCEAN, OverworldBiomes.warmOcean(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.LUKEWARM_OCEAN, OverworldBiomes.lukeWarmOcean(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.DEEP_LUKEWARM_OCEAN, OverworldBiomes.lukeWarmOcean(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.OCEAN, OverworldBiomes.ocean(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.DEEP_OCEAN, OverworldBiomes.ocean(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.COLD_OCEAN, OverworldBiomes.coldOcean(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.DEEP_COLD_OCEAN, OverworldBiomes.coldOcean(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.FROZEN_OCEAN, OverworldBiomes.frozenOcean(holderGetter, holderGetter2, false));
+        biomeRegisterable.register(Biomes.DEEP_FROZEN_OCEAN, OverworldBiomes.frozenOcean(holderGetter, holderGetter2, true));
+        biomeRegisterable.register(Biomes.MUSHROOM_FIELDS, OverworldBiomes.mushroomFields(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.DRIPSTONE_CAVES, OverworldBiomes.dripstoneCaves(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.LUSH_CAVES, OverworldBiomes.lushCaves(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.DEEP_DARK, OverworldBiomes.deepDark(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.NETHER_WASTES, NetherBiomes.netherWastes(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.WARPED_FOREST, NetherBiomes.warpedForest(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.CRIMSON_FOREST, NetherBiomes.crimsonForest(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.SOUL_SAND_VALLEY, NetherBiomes.soulSandValley(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.BASALT_DELTAS, NetherBiomes.basaltDeltas(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.THE_END, EndBiomes.theEnd(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.END_HIGHLANDS, EndBiomes.endHighlands(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.END_MIDLANDS, EndBiomes.endMidlands(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.SMALL_END_ISLANDS, EndBiomes.smallEndIslands(holderGetter, holderGetter2));
+        biomeRegisterable.register(Biomes.END_BARRENS, EndBiomes.endBarrens(holderGetter, holderGetter2));
+    }
+}
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/OverworldBiomes.java b/src/main/java/net/minecraft/data/worldgen/biome/OverworldBiomes.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5b48543581c14e363079ddc8212a33dd9a44908
--- /dev/null
+++ b/src/main/java/net/minecraft/data/worldgen/biome/OverworldBiomes.java
@@ -0,0 +1,870 @@
+package net.minecraft.data.worldgen.biome;
+
+import javax.annotation.Nullable;
+import net.minecraft.core.HolderGetter;
+import net.minecraft.data.worldgen.BiomeDefaultFeatures;
+import net.minecraft.data.worldgen.Carvers;
+import net.minecraft.data.worldgen.placement.AquaticPlacements;
+import net.minecraft.data.worldgen.placement.MiscOverworldPlacements;
+import net.minecraft.data.worldgen.placement.VegetationPlacements;
+import net.minecraft.sounds.Music;
+import net.minecraft.sounds.Musics;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.biome.AmbientMoodSettings;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.BiomeGenerationSettings;
+import net.minecraft.world.level.biome.BiomeSpecialEffects;
+import net.minecraft.world.level.biome.MobSpawnSettings;
+import net.minecraft.world.level.levelgen.GenerationStep;
+import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
+import net.minecraft.world.level.levelgen.placement.PlacedFeature;
+
+public class OverworldBiomes {
+    protected static final int NORMAL_WATER_COLOR = 4159204;
+    protected static final int NORMAL_WATER_FOG_COLOR = 329011;
+    private static final int OVERWORLD_FOG_COLOR = 12638463;
+    @Nullable
+    private static final Music NORMAL_MUSIC = null;
+
+    protected static int calculateSkyColor(float temperature) {
+        float f = temperature / 3.0F;
+        f = Mth.clamp(f, -1.0F, 1.0F);
+        return Mth.hsvToRgb(0.62222224F - f * 0.05F, 0.5F + f * 0.1F, 1.0F);
+    }
+
+    private static Biome biome(
+        boolean precipitation,
+        float temperature,
+        float downfall,
+        MobSpawnSettings.Builder spawnSettings,
+        BiomeGenerationSettings.Builder generationSettings,
+        @Nullable Music music
+    ) {
+        return biome(precipitation, temperature, downfall, 4159204, 329011, null, null, spawnSettings, generationSettings, music);
+    }
+
+    private static Biome biome(
+        boolean precipitation,
+        float temperature,
+        float downfall,
+        int waterColor,
+        int waterFogColor,
+        @Nullable Integer grassColor,
+        @Nullable Integer foliageColor,
+        MobSpawnSettings.Builder spawnSettings,
+        BiomeGenerationSettings.Builder generationSettings,
+        @Nullable Music music
+    ) {
+        BiomeSpecialEffects.Builder builder = new BiomeSpecialEffects.Builder()
+            .waterColor(waterColor)
+            .waterFogColor(waterFogColor)
+            .fogColor(12638463)
+            .skyColor(calculateSkyColor(temperature))
+            .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+            .backgroundMusic(music);
+        if (grassColor != null) {
+            builder.grassColorOverride(grassColor);
+        }
+
+        if (foliageColor != null) {
+            builder.foliageColorOverride(foliageColor);
+        }
+
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(precipitation)
+            .temperature(temperature)
+            .downfall(downfall)
+            .specialEffects(builder.build())
+            .mobSpawnSettings(spawnSettings.build())
+            .generationSettings(generationSettings.build())
+            .build();
+    }
+
+    private static void globalOverworldGeneration(BiomeGenerationSettings.Builder generationSettings) {
+        BiomeDefaultFeatures.addDefaultCarversAndLakes(generationSettings);
+        BiomeDefaultFeatures.addDefaultCrystalFormations(generationSettings);
+        BiomeDefaultFeatures.addDefaultMonsterRoom(generationSettings);
+        BiomeDefaultFeatures.addDefaultUndergroundVariety(generationSettings);
+        BiomeDefaultFeatures.addDefaultSprings(generationSettings);
+        BiomeDefaultFeatures.addSurfaceFreezing(generationSettings);
+    }
+
+    public static Biome oldGrowthTaiga(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean spruce) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder);
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.WOLF, 8, 4, 4));
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 4, 2, 3));
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.FOX, 8, 2, 4));
+        if (spruce) {
+            BiomeDefaultFeatures.commonSpawns(builder);
+        } else {
+            BiomeDefaultFeatures.caveSpawns(builder);
+            BiomeDefaultFeatures.monsters(builder, 100, 25, 100, false);
+        }
+
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addMossyStoneBlock(builder2);
+        BiomeDefaultFeatures.addFerns(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        builder2.addFeature(
+            GenerationStep.Decoration.VEGETAL_DECORATION,
+            spruce ? VegetationPlacements.TREES_OLD_GROWTH_SPRUCE_TAIGA : VegetationPlacements.TREES_OLD_GROWTH_PINE_TAIGA
+        );
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addGiantTaigaVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        BiomeDefaultFeatures.addCommonBerryBushes(builder2);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_OLD_GROWTH_TAIGA);
+        return biome(true, spruce ? 0.25F : 0.3F, 0.8F, builder, builder2, music);
+    }
+
+    public static Biome sparseJungle(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.baseJungleSpawns(builder);
+        return baseJungle(featureLookup, carverLookup, 0.8F, false, true, false, builder, Musics.createGameMusic(SoundEvents.MUSIC_BIOME_SPARSE_JUNGLE));
+    }
+
+    public static Biome jungle(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.baseJungleSpawns(builder);
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PARROT, 40, 1, 2))
+            .addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.OCELOT, 2, 1, 3))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PANDA, 1, 1, 2));
+        return baseJungle(featureLookup, carverLookup, 0.9F, false, false, true, builder, Musics.createGameMusic(SoundEvents.MUSIC_BIOME_JUNGLE));
+    }
+
+    public static Biome bambooJungle(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.baseJungleSpawns(builder);
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PARROT, 40, 1, 2))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.PANDA, 80, 1, 2))
+            .addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.OCELOT, 2, 1, 1));
+        return baseJungle(featureLookup, carverLookup, 0.9F, true, false, true, builder, Musics.createGameMusic(SoundEvents.MUSIC_BIOME_BAMBOO_JUNGLE));
+    }
+
+    private static Biome baseJungle(
+        HolderGetter<PlacedFeature> featureLookup,
+        HolderGetter<ConfiguredWorldCarver<?>> carverLookup,
+        float depth,
+        boolean bamboo,
+        boolean sparse,
+        boolean unmodified,
+        MobSpawnSettings.Builder spawnSettings,
+        Music music
+    ) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        if (bamboo) {
+            BiomeDefaultFeatures.addBambooVegetation(builder);
+        } else {
+            if (unmodified) {
+                BiomeDefaultFeatures.addLightBambooVegetation(builder);
+            }
+
+            if (sparse) {
+                BiomeDefaultFeatures.addSparseJungleTrees(builder);
+            } else {
+                BiomeDefaultFeatures.addJungleTrees(builder);
+            }
+        }
+
+        BiomeDefaultFeatures.addWarmFlowers(builder);
+        BiomeDefaultFeatures.addJungleGrass(builder);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        BiomeDefaultFeatures.addJungleVines(builder);
+        if (sparse) {
+            BiomeDefaultFeatures.addSparseJungleMelons(builder);
+        } else {
+            BiomeDefaultFeatures.addJungleMelons(builder);
+        }
+
+        return biome(true, 0.95F, depth, spawnSettings, builder, music);
+    }
+
+    public static Biome windsweptHills(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean forest) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder);
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.LLAMA, 5, 4, 6));
+        BiomeDefaultFeatures.commonSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        if (forest) {
+            BiomeDefaultFeatures.addMountainForestTrees(builder2);
+        } else {
+            BiomeDefaultFeatures.addMountainTrees(builder2);
+        }
+
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        BiomeDefaultFeatures.addExtraEmeralds(builder2);
+        BiomeDefaultFeatures.addInfestedStone(builder2);
+        return biome(true, 0.2F, 0.3F, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome desert(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.desertSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        BiomeDefaultFeatures.addFossilDecoration(builder2);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultGrass(builder2);
+        BiomeDefaultFeatures.addDesertVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDesertExtraVegetation(builder2);
+        BiomeDefaultFeatures.addDesertExtraDecoration(builder2);
+        return biome(false, 2.0F, 0.0F, builder, builder2, Musics.createGameMusic(SoundEvents.MUSIC_BIOME_DESERT));
+    }
+
+    public static Biome plains(
+        HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean sunflower, boolean snowy, boolean iceSpikes
+    ) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        if (snowy) {
+            builder.creatureGenerationProbability(0.07F);
+            BiomeDefaultFeatures.snowySpawns(builder);
+            if (iceSpikes) {
+                builder2.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, MiscOverworldPlacements.ICE_SPIKE);
+                builder2.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, MiscOverworldPlacements.ICE_PATCH);
+            }
+        } else {
+            BiomeDefaultFeatures.plainsSpawns(builder);
+            BiomeDefaultFeatures.addPlainGrass(builder2);
+            if (sunflower) {
+                builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.PATCH_SUNFLOWER);
+            }
+        }
+
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        if (snowy) {
+            BiomeDefaultFeatures.addSnowyTrees(builder2);
+            BiomeDefaultFeatures.addDefaultFlowers(builder2);
+            BiomeDefaultFeatures.addDefaultGrass(builder2);
+        } else {
+            BiomeDefaultFeatures.addPlainVegetation(builder2);
+        }
+
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        if (sunflower) {
+            builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.PATCH_SUGAR_CANE);
+            builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.PATCH_PUMPKIN);
+        } else {
+            BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        }
+
+        float f = snowy ? 0.0F : 0.8F;
+        return biome(true, f, snowy ? 0.5F : 0.4F, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome mushroomFields(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.mooshroomSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addMushroomFieldVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        return biome(true, 0.9F, 1.0F, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome savanna(
+        HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean windswept, boolean plateau
+    ) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder);
+        if (!windswept) {
+            BiomeDefaultFeatures.addSavannaGrass(builder);
+        }
+
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        if (windswept) {
+            BiomeDefaultFeatures.addShatteredSavannaTrees(builder);
+            BiomeDefaultFeatures.addDefaultFlowers(builder);
+            BiomeDefaultFeatures.addShatteredSavannaGrass(builder);
+        } else {
+            BiomeDefaultFeatures.addSavannaTrees(builder);
+            BiomeDefaultFeatures.addWarmFlowers(builder);
+            BiomeDefaultFeatures.addSavannaExtraGrass(builder);
+        }
+
+        BiomeDefaultFeatures.addDefaultMushrooms(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder2);
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.HORSE, 1, 2, 6))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.DONKEY, 1, 1, 1));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        if (plateau) {
+            builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.LLAMA, 8, 4, 4));
+        }
+
+        return biome(false, 2.0F, 0.0F, builder2, builder, NORMAL_MUSIC);
+    }
+
+    public static Biome badlands(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean plateau) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.commonSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addExtraGold(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        if (plateau) {
+            BiomeDefaultFeatures.addBadlandsTrees(builder2);
+        }
+
+        BiomeDefaultFeatures.addBadlandGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addBadlandExtraVegetation(builder2);
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(false)
+            .temperature(2.0F)
+            .downfall(0.0F)
+            .specialEffects(
+                new BiomeSpecialEffects.Builder()
+                    .waterColor(4159204)
+                    .waterFogColor(329011)
+                    .fogColor(12638463)
+                    .skyColor(calculateSkyColor(2.0F))
+                    .foliageColorOverride(10387789)
+                    .grassColorOverride(9470285)
+                    .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+                    .backgroundMusic(Musics.createGameMusic(SoundEvents.MUSIC_BIOME_BADLANDS))
+                    .build()
+            )
+            .mobSpawnSettings(builder.build())
+            .generationSettings(builder2.build())
+            .build();
+    }
+
+    private static Biome baseOcean(
+        MobSpawnSettings.Builder spawnSettings, int waterColor, int waterFogColor, BiomeGenerationSettings.Builder generationSettings
+    ) {
+        return biome(true, 0.5F, 0.5F, waterColor, waterFogColor, null, null, spawnSettings, generationSettings, NORMAL_MUSIC);
+    }
+
+    private static BiomeGenerationSettings.Builder baseOceanGeneration(
+        HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup
+    ) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addWaterTrees(builder);
+        BiomeDefaultFeatures.addDefaultFlowers(builder);
+        BiomeDefaultFeatures.addDefaultGrass(builder);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        return builder;
+    }
+
+    public static Biome coldOcean(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean deep) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.oceanSpawns(builder, 3, 4, 15);
+        builder.addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.SALMON, 15, 1, 5));
+        BiomeGenerationSettings.Builder builder2 = baseOceanGeneration(featureLookup, carverLookup);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, deep ? AquaticPlacements.SEAGRASS_DEEP_COLD : AquaticPlacements.SEAGRASS_COLD);
+        BiomeDefaultFeatures.addDefaultSeagrass(builder2);
+        BiomeDefaultFeatures.addColdOceanExtraVegetation(builder2);
+        return baseOcean(builder, 4020182, 329011, builder2);
+    }
+
+    public static Biome ocean(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean deep) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.oceanSpawns(builder, 1, 4, 10);
+        builder.addSpawn(MobCategory.WATER_CREATURE, new MobSpawnSettings.SpawnerData(EntityType.DOLPHIN, 1, 1, 2));
+        BiomeGenerationSettings.Builder builder2 = baseOceanGeneration(featureLookup, carverLookup);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, deep ? AquaticPlacements.SEAGRASS_DEEP : AquaticPlacements.SEAGRASS_NORMAL);
+        BiomeDefaultFeatures.addDefaultSeagrass(builder2);
+        BiomeDefaultFeatures.addColdOceanExtraVegetation(builder2);
+        return baseOcean(builder, 4159204, 329011, builder2);
+    }
+
+    public static Biome lukeWarmOcean(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean deep) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        if (deep) {
+            BiomeDefaultFeatures.oceanSpawns(builder, 8, 4, 8);
+        } else {
+            BiomeDefaultFeatures.oceanSpawns(builder, 10, 2, 15);
+        }
+
+        builder.addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.PUFFERFISH, 5, 1, 3))
+            .addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.TROPICAL_FISH, 25, 8, 8))
+            .addSpawn(MobCategory.WATER_CREATURE, new MobSpawnSettings.SpawnerData(EntityType.DOLPHIN, 2, 1, 2));
+        BiomeGenerationSettings.Builder builder2 = baseOceanGeneration(featureLookup, carverLookup);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, deep ? AquaticPlacements.SEAGRASS_DEEP_WARM : AquaticPlacements.SEAGRASS_WARM);
+        if (deep) {
+            BiomeDefaultFeatures.addDefaultSeagrass(builder2);
+        }
+
+        BiomeDefaultFeatures.addLukeWarmKelp(builder2);
+        return baseOcean(builder, 4566514, 267827, builder2);
+    }
+
+    public static Biome warmOcean(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder()
+            .addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.PUFFERFISH, 15, 1, 3));
+        BiomeDefaultFeatures.warmOceanSpawns(builder, 10, 4);
+        BiomeGenerationSettings.Builder builder2 = baseOceanGeneration(featureLookup, carverLookup)
+            .addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.WARM_OCEAN_VEGETATION)
+            .addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.SEAGRASS_WARM)
+            .addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.SEA_PICKLE);
+        return baseOcean(builder, 4445678, 270131, builder2);
+    }
+
+    public static Biome frozenOcean(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean deep) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder()
+            .addSpawn(MobCategory.WATER_CREATURE, new MobSpawnSettings.SpawnerData(EntityType.SQUID, 1, 1, 4))
+            .addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.SALMON, 15, 1, 5))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.POLAR_BEAR, 1, 1, 2));
+        BiomeDefaultFeatures.commonSpawns(builder);
+        builder.addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.DROWNED, 5, 1, 1));
+        float f = deep ? 0.5F : 0.0F;
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        BiomeDefaultFeatures.addIcebergs(builder2);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addBlueIce(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addWaterTrees(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(true)
+            .temperature(f)
+            .temperatureAdjustment(Biome.TemperatureModifier.FROZEN)
+            .downfall(0.5F)
+            .specialEffects(
+                new BiomeSpecialEffects.Builder()
+                    .waterColor(3750089)
+                    .waterFogColor(329011)
+                    .fogColor(12638463)
+                    .skyColor(calculateSkyColor(f))
+                    .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+                    .build()
+            )
+            .mobSpawnSettings(builder.build())
+            .generationSettings(builder2.build())
+            .build();
+    }
+
+    public static Biome forest(
+        HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean birch, boolean oldGrowth, boolean flower
+    ) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder);
+        Music music;
+        if (flower) {
+            music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_FLOWER_FOREST);
+            builder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.FLOWER_FOREST_FLOWERS);
+        } else {
+            music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_FOREST);
+            BiomeDefaultFeatures.addForestFlowers(builder);
+        }
+
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        if (flower) {
+            builder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.TREES_FLOWER_FOREST);
+            builder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.FLOWER_FLOWER_FOREST);
+            BiomeDefaultFeatures.addDefaultGrass(builder);
+        } else {
+            if (birch) {
+                if (oldGrowth) {
+                    BiomeDefaultFeatures.addTallBirchTrees(builder);
+                } else {
+                    BiomeDefaultFeatures.addBirchTrees(builder);
+                }
+            } else {
+                BiomeDefaultFeatures.addOtherBirchTrees(builder);
+            }
+
+            BiomeDefaultFeatures.addDefaultFlowers(builder);
+            BiomeDefaultFeatures.addForestGrass(builder);
+        }
+
+        BiomeDefaultFeatures.addDefaultMushrooms(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder2);
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        if (flower) {
+            builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 4, 2, 3));
+        } else if (!birch) {
+            builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.WOLF, 5, 4, 4));
+        }
+
+        float f = birch ? 0.6F : 0.7F;
+        return biome(true, f, birch ? 0.6F : 0.8F, builder2, builder, music);
+    }
+
+    public static Biome taiga(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean snowy) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder);
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.WOLF, 8, 4, 4))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 4, 2, 3))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.FOX, 8, 2, 4));
+        BiomeDefaultFeatures.commonSpawns(builder);
+        float f = snowy ? -0.5F : 0.25F;
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addFerns(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addTaigaTrees(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addTaigaGrass(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        if (snowy) {
+            BiomeDefaultFeatures.addRareBerryBushes(builder2);
+        } else {
+            BiomeDefaultFeatures.addCommonBerryBushes(builder2);
+        }
+
+        return biome(true, f, snowy ? 0.4F : 0.8F, snowy ? 4020182 : 4159204, 329011, null, null, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome darkForest(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder);
+        BiomeDefaultFeatures.commonSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, VegetationPlacements.DARK_FOREST_VEGETATION);
+        BiomeDefaultFeatures.addForestFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addForestGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_FOREST);
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(true)
+            .temperature(0.7F)
+            .downfall(0.8F)
+            .specialEffects(
+                new BiomeSpecialEffects.Builder()
+                    .waterColor(4159204)
+                    .waterFogColor(329011)
+                    .fogColor(12638463)
+                    .skyColor(calculateSkyColor(0.7F))
+                    .grassColorModifier(BiomeSpecialEffects.GrassColorModifier.DARK_FOREST)
+                    .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+                    .backgroundMusic(music)
+                    .build()
+            )
+            .mobSpawnSettings(builder.build())
+            .generationSettings(builder2.build())
+            .build();
+    }
+
+    public static Biome swamp(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder);
+        BiomeDefaultFeatures.commonSpawns(builder);
+        builder.addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.SLIME, 1, 1, 1));
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.FROG, 10, 2, 5));
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        BiomeDefaultFeatures.addFossilDecoration(builder2);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addSwampClayDisk(builder2);
+        BiomeDefaultFeatures.addSwampVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addSwampExtraVegetation(builder2);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.SEAGRASS_SWAMP);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_SWAMP);
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(true)
+            .temperature(0.8F)
+            .downfall(0.9F)
+            .specialEffects(
+                new BiomeSpecialEffects.Builder()
+                    .waterColor(6388580)
+                    .waterFogColor(2302743)
+                    .fogColor(12638463)
+                    .skyColor(calculateSkyColor(0.8F))
+                    .foliageColorOverride(6975545)
+                    .grassColorModifier(BiomeSpecialEffects.GrassColorModifier.SWAMP)
+                    .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+                    .backgroundMusic(music)
+                    .build()
+            )
+            .mobSpawnSettings(builder.build())
+            .generationSettings(builder2.build())
+            .build();
+    }
+
+    public static Biome mangroveSwamp(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.commonSpawns(builder);
+        builder.addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.SLIME, 1, 1, 1));
+        builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.FROG, 10, 2, 5));
+        builder.addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.TROPICAL_FISH, 25, 8, 8));
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        BiomeDefaultFeatures.addFossilDecoration(builder2);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addMangroveSwampDisks(builder2);
+        BiomeDefaultFeatures.addMangroveSwampVegetation(builder2);
+        builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.SEAGRASS_SWAMP);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_SWAMP);
+        return new Biome.BiomeBuilder()
+            .hasPrecipitation(true)
+            .temperature(0.8F)
+            .downfall(0.9F)
+            .specialEffects(
+                new BiomeSpecialEffects.Builder()
+                    .waterColor(3832426)
+                    .waterFogColor(5077600)
+                    .fogColor(12638463)
+                    .skyColor(calculateSkyColor(0.8F))
+                    .foliageColorOverride(9285927)
+                    .grassColorModifier(BiomeSpecialEffects.GrassColorModifier.SWAMP)
+                    .ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS)
+                    .backgroundMusic(music)
+                    .build()
+            )
+            .mobSpawnSettings(builder.build())
+            .generationSettings(builder2.build())
+            .build();
+    }
+
+    public static Biome river(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean frozen) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder()
+            .addSpawn(MobCategory.WATER_CREATURE, new MobSpawnSettings.SpawnerData(EntityType.SQUID, 2, 1, 4))
+            .addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.SALMON, 5, 1, 5));
+        BiomeDefaultFeatures.commonSpawns(builder);
+        builder.addSpawn(MobCategory.MONSTER, new MobSpawnSettings.SpawnerData(EntityType.DROWNED, frozen ? 1 : 100, 1, 1));
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addWaterTrees(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        if (!frozen) {
+            builder2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, AquaticPlacements.SEAGRASS_RIVER);
+        }
+
+        float f = frozen ? 0.0F : 0.5F;
+        return biome(true, f, 0.5F, frozen ? 3750089 : 4159204, 329011, null, null, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome beach(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean snowy, boolean stony) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        boolean bl = !stony && !snowy;
+        if (bl) {
+            builder.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.TURTLE, 5, 2, 5));
+        }
+
+        BiomeDefaultFeatures.commonSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addDefaultFlowers(builder2);
+        BiomeDefaultFeatures.addDefaultGrass(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        float f;
+        if (snowy) {
+            f = 0.05F;
+        } else if (stony) {
+            f = 0.2F;
+        } else {
+            f = 0.8F;
+        }
+
+        return biome(true, f, bl ? 0.4F : 0.3F, snowy ? 4020182 : 4159204, 329011, null, null, builder, builder2, NORMAL_MUSIC);
+    }
+
+    public static Biome theVoid(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        builder.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, MiscOverworldPlacements.VOID_START_PLATFORM);
+        return biome(false, 0.5F, 0.5F, new MobSpawnSettings.Builder(), builder, NORMAL_MUSIC);
+    }
+
+    public static Biome meadowOrCherryGrove(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup, boolean cherryGrove) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(cherryGrove ? EntityType.PIG : EntityType.DONKEY, 1, 1, 2))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 2, 2, 6))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.SHEEP, 2, 2, 4));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addPlainGrass(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        if (cherryGrove) {
+            BiomeDefaultFeatures.addCherryGroveVegetation(builder);
+        } else {
+            BiomeDefaultFeatures.addMeadowVegetation(builder);
+        }
+
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(cherryGrove ? SoundEvents.MUSIC_BIOME_CHERRY_GROVE : SoundEvents.MUSIC_BIOME_MEADOW);
+        return cherryGrove
+            ? biome(true, 0.5F, 0.8F, 6141935, 6141935, 11983713, 11983713, builder2, builder, music)
+            : biome(true, 0.5F, 0.8F, 937679, 329011, null, null, builder2, builder, music);
+    }
+
+    public static Biome frozenPeaks(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.GOAT, 5, 1, 3));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addFrozenSprings(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_FROZEN_PEAKS);
+        return biome(true, -0.7F, 0.9F, builder2, builder, music);
+    }
+
+    public static Biome jaggedPeaks(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.GOAT, 5, 1, 3));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addFrozenSprings(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_JAGGED_PEAKS);
+        return biome(true, -0.7F, 0.9F, builder2, builder, music);
+    }
+
+    public static Biome stonyPeaks(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_STONY_PEAKS);
+        return biome(true, 1.0F, 0.3F, builder2, builder, music);
+    }
+
+    public static Biome snowySlopes(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 4, 2, 3))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.GOAT, 5, 1, 3));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addFrozenSprings(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_SNOWY_SLOPES);
+        return biome(true, -0.3F, 0.9F, builder2, builder, music);
+    }
+
+    public static Biome grove(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        BiomeGenerationSettings.Builder builder = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        MobSpawnSettings.Builder builder2 = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.farmAnimals(builder2);
+        builder2.addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.WOLF, 8, 4, 4))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.RABBIT, 4, 2, 3))
+            .addSpawn(MobCategory.CREATURE, new MobSpawnSettings.SpawnerData(EntityType.FOX, 8, 2, 4));
+        BiomeDefaultFeatures.commonSpawns(builder2);
+        globalOverworldGeneration(builder);
+        BiomeDefaultFeatures.addFrozenSprings(builder);
+        BiomeDefaultFeatures.addDefaultOres(builder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder);
+        BiomeDefaultFeatures.addGroveTrees(builder);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder);
+        BiomeDefaultFeatures.addExtraEmeralds(builder);
+        BiomeDefaultFeatures.addInfestedStone(builder);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_GROVE);
+        return biome(true, -0.2F, 0.8F, builder2, builder, music);
+    }
+
+    public static Biome lushCaves(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        builder.addSpawn(MobCategory.AXOLOTLS, new MobSpawnSettings.SpawnerData(EntityType.AXOLOTL, 10, 4, 6));
+        builder.addSpawn(MobCategory.WATER_AMBIENT, new MobSpawnSettings.SpawnerData(EntityType.TROPICAL_FISH, 25, 8, 8));
+        BiomeDefaultFeatures.commonSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addPlainGrass(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addLushCavesSpecialOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addLushCavesVegetationFeatures(builder2);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_LUSH_CAVES);
+        return biome(true, 0.5F, 0.5F, builder, builder2, music);
+    }
+
+    public static Biome dripstoneCaves(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.dripstoneCavesSpawns(builder);
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        globalOverworldGeneration(builder2);
+        BiomeDefaultFeatures.addPlainGrass(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2, true);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addPlainVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        BiomeDefaultFeatures.addDripstone(builder2);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_DRIPSTONE_CAVES);
+        return biome(true, 0.8F, 0.4F, builder, builder2, music);
+    }
+
+    public static Biome deepDark(HolderGetter<PlacedFeature> featureLookup, HolderGetter<ConfiguredWorldCarver<?>> carverLookup) {
+        MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeGenerationSettings.Builder builder2 = new BiomeGenerationSettings.Builder(featureLookup, carverLookup);
+        builder2.addCarver(GenerationStep.Carving.AIR, Carvers.CAVE);
+        builder2.addCarver(GenerationStep.Carving.AIR, Carvers.CAVE_EXTRA_UNDERGROUND);
+        builder2.addCarver(GenerationStep.Carving.AIR, Carvers.CANYON);
+        BiomeDefaultFeatures.addDefaultCrystalFormations(builder2);
+        BiomeDefaultFeatures.addDefaultMonsterRoom(builder2);
+        BiomeDefaultFeatures.addDefaultUndergroundVariety(builder2);
+        BiomeDefaultFeatures.addSurfaceFreezing(builder2);
+        BiomeDefaultFeatures.addPlainGrass(builder2);
+        BiomeDefaultFeatures.addDefaultOres(builder2);
+        BiomeDefaultFeatures.addDefaultSoftDisks(builder2);
+        BiomeDefaultFeatures.addPlainVegetation(builder2);
+        BiomeDefaultFeatures.addDefaultMushrooms(builder2);
+        BiomeDefaultFeatures.addDefaultExtraVegetation(builder2);
+        BiomeDefaultFeatures.addSculk(builder2);
+        Music music = Musics.createGameMusic(SoundEvents.MUSIC_BIOME_DEEP_DARK);
+        return biome(true, 0.8F, 0.4F, builder, builder2, music);
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/biome/Biomes.java b/src/main/java/net/minecraft/world/level/biome/Biomes.java
new file mode 100644
index 0000000000000000000000000000000000000000..d567dd6f9ef0c0cb52945ecf380ea62539252c3e
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/biome/Biomes.java
@@ -0,0 +1,76 @@
+package net.minecraft.world.level.biome;
+
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+
+public abstract class Biomes {
+    public static final ResourceKey<Biome> THE_VOID = register("the_void");
+    public static final ResourceKey<Biome> PLAINS = register("plains");
+    public static final ResourceKey<Biome> SUNFLOWER_PLAINS = register("sunflower_plains");
+    public static final ResourceKey<Biome> SNOWY_PLAINS = register("snowy_plains");
+    public static final ResourceKey<Biome> ICE_SPIKES = register("ice_spikes");
+    public static final ResourceKey<Biome> DESERT = register("desert");
+    public static final ResourceKey<Biome> SWAMP = register("swamp");
+    public static final ResourceKey<Biome> MANGROVE_SWAMP = register("mangrove_swamp");
+    public static final ResourceKey<Biome> FOREST = register("forest");
+    public static final ResourceKey<Biome> FLOWER_FOREST = register("flower_forest");
+    public static final ResourceKey<Biome> BIRCH_FOREST = register("birch_forest");
+    public static final ResourceKey<Biome> DARK_FOREST = register("dark_forest");
+    public static final ResourceKey<Biome> OLD_GROWTH_BIRCH_FOREST = register("old_growth_birch_forest");
+    public static final ResourceKey<Biome> OLD_GROWTH_PINE_TAIGA = register("old_growth_pine_taiga");
+    public static final ResourceKey<Biome> OLD_GROWTH_SPRUCE_TAIGA = register("old_growth_spruce_taiga");
+    public static final ResourceKey<Biome> TAIGA = register("taiga");
+    public static final ResourceKey<Biome> SNOWY_TAIGA = register("snowy_taiga");
+    public static final ResourceKey<Biome> SAVANNA = register("savanna");
+    public static final ResourceKey<Biome> SAVANNA_PLATEAU = register("savanna_plateau");
+    public static final ResourceKey<Biome> WINDSWEPT_HILLS = register("windswept_hills");
+    public static final ResourceKey<Biome> WINDSWEPT_GRAVELLY_HILLS = register("windswept_gravelly_hills");
+    public static final ResourceKey<Biome> WINDSWEPT_FOREST = register("windswept_forest");
+    public static final ResourceKey<Biome> WINDSWEPT_SAVANNA = register("windswept_savanna");
+    public static final ResourceKey<Biome> JUNGLE = register("jungle");
+    public static final ResourceKey<Biome> SPARSE_JUNGLE = register("sparse_jungle");
+    public static final ResourceKey<Biome> BAMBOO_JUNGLE = register("bamboo_jungle");
+    public static final ResourceKey<Biome> BADLANDS = register("badlands");
+    public static final ResourceKey<Biome> ERODED_BADLANDS = register("eroded_badlands");
+    public static final ResourceKey<Biome> WOODED_BADLANDS = register("wooded_badlands");
+    public static final ResourceKey<Biome> MEADOW = register("meadow");
+    public static final ResourceKey<Biome> CHERRY_GROVE = register("cherry_grove");
+    public static final ResourceKey<Biome> GROVE = register("grove");
+    public static final ResourceKey<Biome> SNOWY_SLOPES = register("snowy_slopes");
+    public static final ResourceKey<Biome> FROZEN_PEAKS = register("frozen_peaks");
+    public static final ResourceKey<Biome> JAGGED_PEAKS = register("jagged_peaks");
+    public static final ResourceKey<Biome> STONY_PEAKS = register("stony_peaks");
+    public static final ResourceKey<Biome> RIVER = register("river");
+    public static final ResourceKey<Biome> FROZEN_RIVER = register("frozen_river");
+    public static final ResourceKey<Biome> BEACH = register("beach");
+    public static final ResourceKey<Biome> SNOWY_BEACH = register("snowy_beach");
+    public static final ResourceKey<Biome> STONY_SHORE = register("stony_shore");
+    public static final ResourceKey<Biome> WARM_OCEAN = register("warm_ocean");
+    public static final ResourceKey<Biome> LUKEWARM_OCEAN = register("lukewarm_ocean");
+    public static final ResourceKey<Biome> DEEP_LUKEWARM_OCEAN = register("deep_lukewarm_ocean");
+    public static final ResourceKey<Biome> OCEAN = register("ocean");
+    public static final ResourceKey<Biome> DEEP_OCEAN = register("deep_ocean");
+    public static final ResourceKey<Biome> COLD_OCEAN = register("cold_ocean");
+    public static final ResourceKey<Biome> DEEP_COLD_OCEAN = register("deep_cold_ocean");
+    public static final ResourceKey<Biome> FROZEN_OCEAN = register("frozen_ocean");
+    public static final ResourceKey<Biome> DEEP_FROZEN_OCEAN = register("deep_frozen_ocean");
+    public static final ResourceKey<Biome> MUSHROOM_FIELDS = register("mushroom_fields");
+    public static final ResourceKey<Biome> DRIPSTONE_CAVES = register("dripstone_caves");
+    public static final ResourceKey<Biome> LUSH_CAVES = register("lush_caves");
+    public static final ResourceKey<Biome> DEEP_DARK = register("deep_dark");
+    public static final ResourceKey<Biome> NETHER_WASTES = register("nether_wastes");
+    public static final ResourceKey<Biome> WARPED_FOREST = register("warped_forest");
+    public static final ResourceKey<Biome> CRIMSON_FOREST = register("crimson_forest");
+    public static final ResourceKey<Biome> SOUL_SAND_VALLEY = register("soul_sand_valley");
+    public static final ResourceKey<Biome> BASALT_DELTAS = register("basalt_deltas");
+    public static final ResourceKey<Biome> THE_END = register("the_end");
+    public static final ResourceKey<Biome> END_HIGHLANDS = register("end_highlands");
+    public static final ResourceKey<Biome> END_MIDLANDS = register("end_midlands");
+    public static final ResourceKey<Biome> SMALL_END_ISLANDS = register("small_end_islands");
+    public static final ResourceKey<Biome> END_BARRENS = register("end_barrens");
+
+    private static ResourceKey<Biome> register(String name) {
+        return ResourceKey.create(Registries.BIOME, new ResourceLocation(name));
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/biome/OverworldBiomeBuilder.java b/src/main/java/net/minecraft/world/level/biome/OverworldBiomeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..dcbfb54ea4c8483d60dd86e0ee606aef0dc600dc
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/biome/OverworldBiomeBuilder.java
@@ -0,0 +1,1073 @@
+package net.minecraft.world.level.biome;
+
+import com.mojang.datafixers.util.Pair;
+import java.util.List;
+import java.util.function.Consumer;
+import net.minecraft.SharedConstants;
+import net.minecraft.core.HolderGetter;
+import net.minecraft.core.HolderLookup;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.data.registries.VanillaRegistries;
+import net.minecraft.data.worldgen.TerrainProvider;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.util.CubicSpline;
+import net.minecraft.util.ToFloatFunction;
+import net.minecraft.util.VisibleForDebug;
+import net.minecraft.world.level.levelgen.DensityFunction;
+import net.minecraft.world.level.levelgen.DensityFunctions;
+import net.minecraft.world.level.levelgen.NoiseRouterData;
+
+public final class OverworldBiomeBuilder {
+    private static final float VALLEY_SIZE = 0.05F;
+    private static final float LOW_START = 0.26666668F;
+    public static final float HIGH_START = 0.4F;
+    private static final float HIGH_END = 0.93333334F;
+    private static final float PEAK_SIZE = 0.1F;
+    public static final float PEAK_START = 0.56666666F;
+    private static final float PEAK_END = 0.7666667F;
+    public static final float NEAR_INLAND_START = -0.11F;
+    public static final float MID_INLAND_START = 0.03F;
+    public static final float FAR_INLAND_START = 0.3F;
+    public static final float EROSION_INDEX_1_START = -0.78F;
+    public static final float EROSION_INDEX_2_START = -0.375F;
+    private static final float EROSION_DEEP_DARK_DRYNESS_THRESHOLD = -0.225F;
+    private static final float DEPTH_DEEP_DARK_DRYNESS_THRESHOLD = 0.9F;
+    private final Climate.Parameter FULL_RANGE = Climate.Parameter.span(-1.0F, 1.0F);
+    private final Climate.Parameter[] temperatures = new Climate.Parameter[]{
+        Climate.Parameter.span(-1.0F, -0.45F),
+        Climate.Parameter.span(-0.45F, -0.15F),
+        Climate.Parameter.span(-0.15F, 0.2F),
+        Climate.Parameter.span(0.2F, 0.55F),
+        Climate.Parameter.span(0.55F, 1.0F)
+    };
+    private final Climate.Parameter[] humidities = new Climate.Parameter[]{
+        Climate.Parameter.span(-1.0F, -0.35F),
+        Climate.Parameter.span(-0.35F, -0.1F),
+        Climate.Parameter.span(-0.1F, 0.1F),
+        Climate.Parameter.span(0.1F, 0.3F),
+        Climate.Parameter.span(0.3F, 1.0F)
+    };
+    private final Climate.Parameter[] erosions = new Climate.Parameter[]{
+        Climate.Parameter.span(-1.0F, -0.78F),
+        Climate.Parameter.span(-0.78F, -0.375F),
+        Climate.Parameter.span(-0.375F, -0.2225F),
+        Climate.Parameter.span(-0.2225F, 0.05F),
+        Climate.Parameter.span(0.05F, 0.45F),
+        Climate.Parameter.span(0.45F, 0.55F),
+        Climate.Parameter.span(0.55F, 1.0F)
+    };
+    private final Climate.Parameter FROZEN_RANGE = this.temperatures[0];
+    private final Climate.Parameter UNFROZEN_RANGE = Climate.Parameter.span(this.temperatures[1], this.temperatures[4]);
+    private final Climate.Parameter mushroomFieldsContinentalness = Climate.Parameter.span(-1.2F, -1.05F);
+    private final Climate.Parameter deepOceanContinentalness = Climate.Parameter.span(-1.05F, -0.455F);
+    private final Climate.Parameter oceanContinentalness = Climate.Parameter.span(-0.455F, -0.19F);
+    private final Climate.Parameter coastContinentalness = Climate.Parameter.span(-0.19F, -0.11F);
+    private final Climate.Parameter inlandContinentalness = Climate.Parameter.span(-0.11F, 0.55F);
+    private final Climate.Parameter nearInlandContinentalness = Climate.Parameter.span(-0.11F, 0.03F);
+    private final Climate.Parameter midInlandContinentalness = Climate.Parameter.span(0.03F, 0.3F);
+    private final Climate.Parameter farInlandContinentalness = Climate.Parameter.span(0.3F, 1.0F);
+    private final ResourceKey<Biome>[][] OCEANS = new ResourceKey[][]{
+        {Biomes.DEEP_FROZEN_OCEAN, Biomes.DEEP_COLD_OCEAN, Biomes.DEEP_OCEAN, Biomes.DEEP_LUKEWARM_OCEAN, Biomes.WARM_OCEAN},
+        {Biomes.FROZEN_OCEAN, Biomes.COLD_OCEAN, Biomes.OCEAN, Biomes.LUKEWARM_OCEAN, Biomes.WARM_OCEAN}
+    };
+    private final ResourceKey<Biome>[][] MIDDLE_BIOMES = new ResourceKey[][]{
+        {Biomes.SNOWY_PLAINS, Biomes.SNOWY_PLAINS, Biomes.SNOWY_PLAINS, Biomes.SNOWY_TAIGA, Biomes.TAIGA},
+        {Biomes.PLAINS, Biomes.PLAINS, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA},
+        {Biomes.FLOWER_FOREST, Biomes.PLAINS, Biomes.FOREST, Biomes.BIRCH_FOREST, Biomes.DARK_FOREST},
+        {Biomes.SAVANNA, Biomes.SAVANNA, Biomes.FOREST, Biomes.JUNGLE, Biomes.JUNGLE},
+        {Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT}
+    };
+    private final ResourceKey<Biome>[][] MIDDLE_BIOMES_VARIANT = new ResourceKey[][]{
+        {Biomes.ICE_SPIKES, null, Biomes.SNOWY_TAIGA, null, null},
+        {null, null, null, null, Biomes.OLD_GROWTH_PINE_TAIGA},
+        {Biomes.SUNFLOWER_PLAINS, null, null, Biomes.OLD_GROWTH_BIRCH_FOREST, null},
+        {null, null, Biomes.PLAINS, Biomes.SPARSE_JUNGLE, Biomes.BAMBOO_JUNGLE},
+        {null, null, null, null, null}
+    };
+    private final ResourceKey<Biome>[][] PLATEAU_BIOMES = new ResourceKey[][]{
+        {Biomes.SNOWY_PLAINS, Biomes.SNOWY_PLAINS, Biomes.SNOWY_PLAINS, Biomes.SNOWY_TAIGA, Biomes.SNOWY_TAIGA},
+        {Biomes.MEADOW, Biomes.MEADOW, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA},
+        {Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.DARK_FOREST},
+        {Biomes.SAVANNA_PLATEAU, Biomes.SAVANNA_PLATEAU, Biomes.FOREST, Biomes.FOREST, Biomes.JUNGLE},
+        {Biomes.BADLANDS, Biomes.BADLANDS, Biomes.BADLANDS, Biomes.WOODED_BADLANDS, Biomes.WOODED_BADLANDS}
+    };
+    private final ResourceKey<Biome>[][] PLATEAU_BIOMES_VARIANT = new ResourceKey[][]{
+        {Biomes.ICE_SPIKES, null, null, null, null},
+        {Biomes.CHERRY_GROVE, null, Biomes.MEADOW, Biomes.MEADOW, Biomes.OLD_GROWTH_PINE_TAIGA},
+        {Biomes.CHERRY_GROVE, Biomes.CHERRY_GROVE, Biomes.FOREST, Biomes.BIRCH_FOREST, null},
+        {null, null, null, null, null},
+        {Biomes.ERODED_BADLANDS, Biomes.ERODED_BADLANDS, null, null, null}
+    };
+    private final ResourceKey<Biome>[][] SHATTERED_BIOMES = new ResourceKey[][]{
+        {Biomes.WINDSWEPT_GRAVELLY_HILLS, Biomes.WINDSWEPT_GRAVELLY_HILLS, Biomes.WINDSWEPT_HILLS, Biomes.WINDSWEPT_FOREST, Biomes.WINDSWEPT_FOREST},
+        {Biomes.WINDSWEPT_GRAVELLY_HILLS, Biomes.WINDSWEPT_GRAVELLY_HILLS, Biomes.WINDSWEPT_HILLS, Biomes.WINDSWEPT_FOREST, Biomes.WINDSWEPT_FOREST},
+        {Biomes.WINDSWEPT_HILLS, Biomes.WINDSWEPT_HILLS, Biomes.WINDSWEPT_HILLS, Biomes.WINDSWEPT_FOREST, Biomes.WINDSWEPT_FOREST},
+        {null, null, null, null, null},
+        {null, null, null, null, null}
+    };
+
+    public List<Climate.ParameterPoint> spawnTarget() {
+        Climate.Parameter parameter = Climate.Parameter.point(0.0F);
+        float f = 0.16F;
+        return List.of(
+            new Climate.ParameterPoint(
+                this.FULL_RANGE,
+                this.FULL_RANGE,
+                Climate.Parameter.span(this.inlandContinentalness, this.FULL_RANGE),
+                this.FULL_RANGE,
+                parameter,
+                Climate.Parameter.span(-1.0F, -0.16F),
+                0L
+            ),
+            new Climate.ParameterPoint(
+                this.FULL_RANGE,
+                this.FULL_RANGE,
+                Climate.Parameter.span(this.inlandContinentalness, this.FULL_RANGE),
+                this.FULL_RANGE,
+                parameter,
+                Climate.Parameter.span(0.16F, 1.0F),
+                0L
+            )
+        );
+    }
+
+    protected void addBiomes(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters) {
+        if (SharedConstants.debugGenerateSquareTerrainWithoutNoise) {
+            this.addDebugBiomes(parameters);
+        } else {
+            this.addOffCoastBiomes(parameters);
+            this.addInlandBiomes(parameters);
+            this.addUndergroundBiomes(parameters);
+        }
+    }
+
+    private void addDebugBiomes(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters) {
+        HolderLookup.Provider provider = VanillaRegistries.createLookup();
+        HolderGetter<DensityFunction> holderGetter = provider.lookupOrThrow(Registries.DENSITY_FUNCTION);
+        DensityFunctions.Spline.Coordinate coordinate = new DensityFunctions.Spline.Coordinate(holderGetter.getOrThrow(NoiseRouterData.CONTINENTS));
+        DensityFunctions.Spline.Coordinate coordinate2 = new DensityFunctions.Spline.Coordinate(holderGetter.getOrThrow(NoiseRouterData.EROSION));
+        DensityFunctions.Spline.Coordinate coordinate3 = new DensityFunctions.Spline.Coordinate(holderGetter.getOrThrow(NoiseRouterData.RIDGES_FOLDED));
+        parameters.accept(
+            Pair.of(
+                Climate.parameters(this.FULL_RANGE, this.FULL_RANGE, this.FULL_RANGE, this.FULL_RANGE, Climate.Parameter.point(0.0F), this.FULL_RANGE, 0.01F),
+                Biomes.PLAINS
+            )
+        );
+        if (TerrainProvider.buildErosionOffsetSpline(coordinate2, coordinate3, -0.15F, 0.0F, 0.0F, 0.1F, 0.0F, -0.03F, false, false, ToFloatFunction.IDENTITY) instanceof CubicSpline.Multipoint<?, ?> multipoint
+            )
+         {
+            ResourceKey<Biome> resourceKey = Biomes.DESERT;
+
+            for (float f : multipoint.locations()) {
+                parameters.accept(
+                    Pair.of(
+                        Climate.parameters(
+                            this.FULL_RANGE, this.FULL_RANGE, this.FULL_RANGE, Climate.Parameter.point(f), Climate.Parameter.point(0.0F), this.FULL_RANGE, 0.0F
+                        ),
+                        resourceKey
+                    )
+                );
+                resourceKey = resourceKey == Biomes.DESERT ? Biomes.BADLANDS : Biomes.DESERT;
+            }
+        }
+
+        if (TerrainProvider.overworldOffset(coordinate, coordinate2, coordinate3, false) instanceof CubicSpline.Multipoint<?, ?> multipoint2) {
+            for (float g : multipoint2.locations()) {
+                parameters.accept(
+                    Pair.of(
+                        Climate.parameters(
+                            this.FULL_RANGE, this.FULL_RANGE, Climate.Parameter.point(g), this.FULL_RANGE, Climate.Parameter.point(0.0F), this.FULL_RANGE, 0.0F
+                        ),
+                        Biomes.SNOWY_TAIGA
+                    )
+                );
+            }
+        }
+    }
+
+    private void addOffCoastBiomes(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters) {
+        this.addSurfaceBiome(
+            parameters, this.FULL_RANGE, this.FULL_RANGE, this.mushroomFieldsContinentalness, this.FULL_RANGE, this.FULL_RANGE, 0.0F, Biomes.MUSHROOM_FIELDS
+        );
+
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+            this.addSurfaceBiome(
+                parameters, parameter, this.FULL_RANGE, this.deepOceanContinentalness, this.FULL_RANGE, this.FULL_RANGE, 0.0F, this.OCEANS[0][i]
+            );
+            this.addSurfaceBiome(parameters, parameter, this.FULL_RANGE, this.oceanContinentalness, this.FULL_RANGE, this.FULL_RANGE, 0.0F, this.OCEANS[1][i]);
+        }
+    }
+
+    private void addInlandBiomes(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters) {
+        this.addMidSlice(parameters, Climate.Parameter.span(-1.0F, -0.93333334F));
+        this.addHighSlice(parameters, Climate.Parameter.span(-0.93333334F, -0.7666667F));
+        this.addPeaks(parameters, Climate.Parameter.span(-0.7666667F, -0.56666666F));
+        this.addHighSlice(parameters, Climate.Parameter.span(-0.56666666F, -0.4F));
+        this.addMidSlice(parameters, Climate.Parameter.span(-0.4F, -0.26666668F));
+        this.addLowSlice(parameters, Climate.Parameter.span(-0.26666668F, -0.05F));
+        this.addValleys(parameters, Climate.Parameter.span(-0.05F, 0.05F));
+        this.addLowSlice(parameters, Climate.Parameter.span(0.05F, 0.26666668F));
+        this.addMidSlice(parameters, Climate.Parameter.span(0.26666668F, 0.4F));
+        this.addHighSlice(parameters, Climate.Parameter.span(0.4F, 0.56666666F));
+        this.addPeaks(parameters, Climate.Parameter.span(0.56666666F, 0.7666667F));
+        this.addHighSlice(parameters, Climate.Parameter.span(0.7666667F, 0.93333334F));
+        this.addMidSlice(parameters, Climate.Parameter.span(0.93333334F, 1.0F));
+    }
+
+    private void addPeaks(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters, Climate.Parameter weirdness) {
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+
+            for (int j = 0; j < this.humidities.length; j++) {
+                Climate.Parameter parameter2 = this.humidities[j];
+                ResourceKey<Biome> resourceKey = this.pickMiddleBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey2 = this.pickMiddleBiomeOrBadlandsIfHot(i, j, weirdness);
+                ResourceKey<Biome> resourceKey3 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(i, j, weirdness);
+                ResourceKey<Biome> resourceKey4 = this.pickPlateauBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey5 = this.pickShatteredBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey6 = this.maybePickWindsweptSavannaBiome(i, j, weirdness, resourceKey5);
+                ResourceKey<Biome> resourceKey7 = this.pickPeakBiome(i, j, weirdness);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                    this.erosions[0],
+                    weirdness,
+                    0.0F,
+                    resourceKey7
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    this.erosions[1],
+                    weirdness,
+                    0.0F,
+                    resourceKey3
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[1],
+                    weirdness,
+                    0.0F,
+                    resourceKey7
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    Climate.Parameter.span(this.erosions[2], this.erosions[3]),
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[2],
+                    weirdness,
+                    0.0F,
+                    resourceKey4
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.midInlandContinentalness, this.erosions[3], weirdness, 0.0F, resourceKey2);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.farInlandContinentalness, this.erosions[3], weirdness, 0.0F, resourceKey4);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                    this.erosions[4],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey6
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey5
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                    this.erosions[6],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+            }
+        }
+    }
+
+    private void addHighSlice(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters, Climate.Parameter weirdness) {
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+
+            for (int j = 0; j < this.humidities.length; j++) {
+                Climate.Parameter parameter2 = this.humidities[j];
+                ResourceKey<Biome> resourceKey = this.pickMiddleBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey2 = this.pickMiddleBiomeOrBadlandsIfHot(i, j, weirdness);
+                ResourceKey<Biome> resourceKey3 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(i, j, weirdness);
+                ResourceKey<Biome> resourceKey4 = this.pickPlateauBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey5 = this.pickShatteredBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey6 = this.maybePickWindsweptSavannaBiome(i, j, weirdness, resourceKey);
+                ResourceKey<Biome> resourceKey7 = this.pickSlopeBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey8 = this.pickPeakBiome(i, j, weirdness);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    this.coastContinentalness,
+                    Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.nearInlandContinentalness, this.erosions[0], weirdness, 0.0F, resourceKey7);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[0],
+                    weirdness,
+                    0.0F,
+                    resourceKey8
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.nearInlandContinentalness, this.erosions[1], weirdness, 0.0F, resourceKey3);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[1],
+                    weirdness,
+                    0.0F,
+                    resourceKey7
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    Climate.Parameter.span(this.erosions[2], this.erosions[3]),
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[2],
+                    weirdness,
+                    0.0F,
+                    resourceKey4
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.midInlandContinentalness, this.erosions[3], weirdness, 0.0F, resourceKey2);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.farInlandContinentalness, this.erosions[3], weirdness, 0.0F, resourceKey4);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                    this.erosions[4],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey6
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey5
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                    this.erosions[6],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+            }
+        }
+    }
+
+    private void addMidSlice(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters, Climate.Parameter weirdness) {
+        this.addSurfaceBiome(
+            parameters,
+            this.FULL_RANGE,
+            this.FULL_RANGE,
+            this.coastContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[2]),
+            weirdness,
+            0.0F,
+            Biomes.STONY_SHORE
+        );
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[1], this.temperatures[2]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.SWAMP
+        );
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[3], this.temperatures[4]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.MANGROVE_SWAMP
+        );
+
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+
+            for (int j = 0; j < this.humidities.length; j++) {
+                Climate.Parameter parameter2 = this.humidities[j];
+                ResourceKey<Biome> resourceKey = this.pickMiddleBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey2 = this.pickMiddleBiomeOrBadlandsIfHot(i, j, weirdness);
+                ResourceKey<Biome> resourceKey3 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(i, j, weirdness);
+                ResourceKey<Biome> resourceKey4 = this.pickShatteredBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey5 = this.pickPlateauBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey6 = this.pickBeachBiome(i, j);
+                ResourceKey<Biome> resourceKey7 = this.maybePickWindsweptSavannaBiome(i, j, weirdness, resourceKey);
+                ResourceKey<Biome> resourceKey8 = this.pickShatteredCoastBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey9 = this.pickSlopeBiome(i, j, weirdness);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[0],
+                    weirdness,
+                    0.0F,
+                    resourceKey9
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.nearInlandContinentalness, this.midInlandContinentalness),
+                    this.erosions[1],
+                    weirdness,
+                    0.0F,
+                    resourceKey3
+                );
+                this.addSurfaceBiome(
+                    parameters, parameter, parameter2, this.farInlandContinentalness, this.erosions[1], weirdness, 0.0F, i == 0 ? resourceKey9 : resourceKey5
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.nearInlandContinentalness, this.erosions[2], weirdness, 0.0F, resourceKey);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.midInlandContinentalness, this.erosions[2], weirdness, 0.0F, resourceKey2);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.farInlandContinentalness, this.erosions[2], weirdness, 0.0F, resourceKey5);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.coastContinentalness, this.nearInlandContinentalness),
+                    this.erosions[3],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[3],
+                    weirdness,
+                    0.0F,
+                    resourceKey2
+                );
+                if (weirdness.max() < 0L) {
+                    this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[4], weirdness, 0.0F, resourceKey6);
+                    this.addSurfaceBiome(
+                        parameters,
+                        parameter,
+                        parameter2,
+                        Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+                        this.erosions[4],
+                        weirdness,
+                        0.0F,
+                        resourceKey
+                    );
+                } else {
+                    this.addSurfaceBiome(
+                        parameters,
+                        parameter,
+                        parameter2,
+                        Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+                        this.erosions[4],
+                        weirdness,
+                        0.0F,
+                        resourceKey
+                    );
+                }
+
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[5], weirdness, 0.0F, resourceKey8);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.nearInlandContinentalness, this.erosions[5], weirdness, 0.0F, resourceKey7);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey4
+                );
+                if (weirdness.max() < 0L) {
+                    this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[6], weirdness, 0.0F, resourceKey6);
+                } else {
+                    this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[6], weirdness, 0.0F, resourceKey);
+                }
+
+                if (i == 0) {
+                    this.addSurfaceBiome(
+                        parameters,
+                        parameter,
+                        parameter2,
+                        Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+                        this.erosions[6],
+                        weirdness,
+                        0.0F,
+                        resourceKey
+                    );
+                }
+            }
+        }
+    }
+
+    private void addLowSlice(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters, Climate.Parameter weirdness) {
+        this.addSurfaceBiome(
+            parameters,
+            this.FULL_RANGE,
+            this.FULL_RANGE,
+            this.coastContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[2]),
+            weirdness,
+            0.0F,
+            Biomes.STONY_SHORE
+        );
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[1], this.temperatures[2]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.SWAMP
+        );
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[3], this.temperatures[4]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.MANGROVE_SWAMP
+        );
+
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+
+            for (int j = 0; j < this.humidities.length; j++) {
+                Climate.Parameter parameter2 = this.humidities[j];
+                ResourceKey<Biome> resourceKey = this.pickMiddleBiome(i, j, weirdness);
+                ResourceKey<Biome> resourceKey2 = this.pickMiddleBiomeOrBadlandsIfHot(i, j, weirdness);
+                ResourceKey<Biome> resourceKey3 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(i, j, weirdness);
+                ResourceKey<Biome> resourceKey4 = this.pickBeachBiome(i, j);
+                ResourceKey<Biome> resourceKey5 = this.maybePickWindsweptSavannaBiome(i, j, weirdness, resourceKey);
+                ResourceKey<Biome> resourceKey6 = this.pickShatteredCoastBiome(i, j, weirdness);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    this.nearInlandContinentalness,
+                    Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+                    weirdness,
+                    0.0F,
+                    resourceKey2
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+                    weirdness,
+                    0.0F,
+                    resourceKey3
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    this.nearInlandContinentalness,
+                    Climate.Parameter.span(this.erosions[2], this.erosions[3]),
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    Climate.Parameter.span(this.erosions[2], this.erosions[3]),
+                    weirdness,
+                    0.0F,
+                    resourceKey2
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    this.coastContinentalness,
+                    Climate.Parameter.span(this.erosions[3], this.erosions[4]),
+                    weirdness,
+                    0.0F,
+                    resourceKey4
+                );
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[4],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[5], weirdness, 0.0F, resourceKey6);
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.nearInlandContinentalness, this.erosions[5], weirdness, 0.0F, resourceKey5);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    this.erosions[5],
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+                this.addSurfaceBiome(parameters, parameter, parameter2, this.coastContinentalness, this.erosions[6], weirdness, 0.0F, resourceKey4);
+                if (i == 0) {
+                    this.addSurfaceBiome(
+                        parameters,
+                        parameter,
+                        parameter2,
+                        Climate.Parameter.span(this.nearInlandContinentalness, this.farInlandContinentalness),
+                        this.erosions[6],
+                        weirdness,
+                        0.0F,
+                        resourceKey
+                    );
+                }
+            }
+        }
+    }
+
+    private void addValleys(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters, Climate.Parameter weirdness) {
+        this.addSurfaceBiome(
+            parameters,
+            this.FROZEN_RANGE,
+            this.FULL_RANGE,
+            this.coastContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+            weirdness,
+            0.0F,
+            weirdness.max() < 0L ? Biomes.STONY_SHORE : Biomes.FROZEN_RIVER
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.UNFROZEN_RANGE,
+            this.FULL_RANGE,
+            this.coastContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+            weirdness,
+            0.0F,
+            weirdness.max() < 0L ? Biomes.STONY_SHORE : Biomes.RIVER
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.FROZEN_RANGE,
+            this.FULL_RANGE,
+            this.nearInlandContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+            weirdness,
+            0.0F,
+            Biomes.FROZEN_RIVER
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.UNFROZEN_RANGE,
+            this.FULL_RANGE,
+            this.nearInlandContinentalness,
+            Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+            weirdness,
+            0.0F,
+            Biomes.RIVER
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.FROZEN_RANGE,
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+            Climate.Parameter.span(this.erosions[2], this.erosions[5]),
+            weirdness,
+            0.0F,
+            Biomes.FROZEN_RIVER
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.UNFROZEN_RANGE,
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.coastContinentalness, this.farInlandContinentalness),
+            Climate.Parameter.span(this.erosions[2], this.erosions[5]),
+            weirdness,
+            0.0F,
+            Biomes.RIVER
+        );
+        this.addSurfaceBiome(parameters, this.FROZEN_RANGE, this.FULL_RANGE, this.coastContinentalness, this.erosions[6], weirdness, 0.0F, Biomes.FROZEN_RIVER);
+        this.addSurfaceBiome(parameters, this.UNFROZEN_RANGE, this.FULL_RANGE, this.coastContinentalness, this.erosions[6], weirdness, 0.0F, Biomes.RIVER);
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[1], this.temperatures[2]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.inlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.SWAMP
+        );
+        this.addSurfaceBiome(
+            parameters,
+            Climate.Parameter.span(this.temperatures[3], this.temperatures[4]),
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.inlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.MANGROVE_SWAMP
+        );
+        this.addSurfaceBiome(
+            parameters,
+            this.FROZEN_RANGE,
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.inlandContinentalness, this.farInlandContinentalness),
+            this.erosions[6],
+            weirdness,
+            0.0F,
+            Biomes.FROZEN_RIVER
+        );
+
+        for (int i = 0; i < this.temperatures.length; i++) {
+            Climate.Parameter parameter = this.temperatures[i];
+
+            for (int j = 0; j < this.humidities.length; j++) {
+                Climate.Parameter parameter2 = this.humidities[j];
+                ResourceKey<Biome> resourceKey = this.pickMiddleBiomeOrBadlandsIfHot(i, j, weirdness);
+                this.addSurfaceBiome(
+                    parameters,
+                    parameter,
+                    parameter2,
+                    Climate.Parameter.span(this.midInlandContinentalness, this.farInlandContinentalness),
+                    Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+                    weirdness,
+                    0.0F,
+                    resourceKey
+                );
+            }
+        }
+    }
+
+    private void addUndergroundBiomes(Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters) {
+        this.addUndergroundBiome(
+            parameters, this.FULL_RANGE, this.FULL_RANGE, Climate.Parameter.span(0.8F, 1.0F), this.FULL_RANGE, this.FULL_RANGE, 0.0F, Biomes.DRIPSTONE_CAVES
+        );
+        this.addUndergroundBiome(
+            parameters, this.FULL_RANGE, Climate.Parameter.span(0.7F, 1.0F), this.FULL_RANGE, this.FULL_RANGE, this.FULL_RANGE, 0.0F, Biomes.LUSH_CAVES
+        );
+        this.addBottomBiome(
+            parameters,
+            this.FULL_RANGE,
+            this.FULL_RANGE,
+            this.FULL_RANGE,
+            Climate.Parameter.span(this.erosions[0], this.erosions[1]),
+            this.FULL_RANGE,
+            0.0F,
+            Biomes.DEEP_DARK
+        );
+    }
+
+    private ResourceKey<Biome> pickMiddleBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        if (weirdness.max() < 0L) {
+            return this.MIDDLE_BIOMES[temperature][humidity];
+        } else {
+            ResourceKey<Biome> resourceKey = this.MIDDLE_BIOMES_VARIANT[temperature][humidity];
+            return resourceKey == null ? this.MIDDLE_BIOMES[temperature][humidity] : resourceKey;
+        }
+    }
+
+    private ResourceKey<Biome> pickMiddleBiomeOrBadlandsIfHot(int temperature, int humidity, Climate.Parameter weirdness) {
+        return temperature == 4 ? this.pickBadlandsBiome(humidity, weirdness) : this.pickMiddleBiome(temperature, humidity, weirdness);
+    }
+
+    private ResourceKey<Biome> pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(int temperature, int humidity, Climate.Parameter weirdness) {
+        return temperature == 0 ? this.pickSlopeBiome(temperature, humidity, weirdness) : this.pickMiddleBiomeOrBadlandsIfHot(temperature, humidity, weirdness);
+    }
+
+    private ResourceKey<Biome> maybePickWindsweptSavannaBiome(int temperature, int humidity, Climate.Parameter weirdness, ResourceKey<Biome> biomeKey) {
+        return temperature > 1 && humidity < 4 && weirdness.max() >= 0L ? Biomes.WINDSWEPT_SAVANNA : biomeKey;
+    }
+
+    private ResourceKey<Biome> pickShatteredCoastBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        ResourceKey<Biome> resourceKey = weirdness.max() >= 0L
+            ? this.pickMiddleBiome(temperature, humidity, weirdness)
+            : this.pickBeachBiome(temperature, humidity);
+        return this.maybePickWindsweptSavannaBiome(temperature, humidity, weirdness, resourceKey);
+    }
+
+    private ResourceKey<Biome> pickBeachBiome(int temperature, int humidity) {
+        if (temperature == 0) {
+            return Biomes.SNOWY_BEACH;
+        } else {
+            return temperature == 4 ? Biomes.DESERT : Biomes.BEACH;
+        }
+    }
+
+    private ResourceKey<Biome> pickBadlandsBiome(int humidity, Climate.Parameter weirdness) {
+        if (humidity < 2) {
+            return weirdness.max() < 0L ? Biomes.BADLANDS : Biomes.ERODED_BADLANDS;
+        } else {
+            return humidity < 3 ? Biomes.BADLANDS : Biomes.WOODED_BADLANDS;
+        }
+    }
+
+    private ResourceKey<Biome> pickPlateauBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        if (weirdness.max() >= 0L) {
+            ResourceKey<Biome> resourceKey = this.PLATEAU_BIOMES_VARIANT[temperature][humidity];
+            if (resourceKey != null) {
+                return resourceKey;
+            }
+        }
+
+        return this.PLATEAU_BIOMES[temperature][humidity];
+    }
+
+    private ResourceKey<Biome> pickPeakBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        if (temperature <= 2) {
+            return weirdness.max() < 0L ? Biomes.JAGGED_PEAKS : Biomes.FROZEN_PEAKS;
+        } else {
+            return temperature == 3 ? Biomes.STONY_PEAKS : this.pickBadlandsBiome(humidity, weirdness);
+        }
+    }
+
+    private ResourceKey<Biome> pickSlopeBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        if (temperature >= 3) {
+            return this.pickPlateauBiome(temperature, humidity, weirdness);
+        } else {
+            return humidity <= 1 ? Biomes.SNOWY_SLOPES : Biomes.GROVE;
+        }
+    }
+
+    private ResourceKey<Biome> pickShatteredBiome(int temperature, int humidity, Climate.Parameter weirdness) {
+        ResourceKey<Biome> resourceKey = this.SHATTERED_BIOMES[temperature][humidity];
+        return resourceKey == null ? this.pickMiddleBiome(temperature, humidity, weirdness) : resourceKey;
+    }
+
+    private void addSurfaceBiome(
+        Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters,
+        Climate.Parameter temperature,
+        Climate.Parameter humidity,
+        Climate.Parameter continentalness,
+        Climate.Parameter erosion,
+        Climate.Parameter weirdness,
+        float offset,
+        ResourceKey<Biome> biome
+    ) {
+        parameters.accept(Pair.of(Climate.parameters(temperature, humidity, continentalness, erosion, Climate.Parameter.point(0.0F), weirdness, offset), biome));
+        parameters.accept(Pair.of(Climate.parameters(temperature, humidity, continentalness, erosion, Climate.Parameter.point(1.0F), weirdness, offset), biome));
+    }
+
+    private void addUndergroundBiome(
+        Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters,
+        Climate.Parameter temperature,
+        Climate.Parameter humidity,
+        Climate.Parameter continentalness,
+        Climate.Parameter erosion,
+        Climate.Parameter weirdness,
+        float offset,
+        ResourceKey<Biome> biome
+    ) {
+        parameters.accept(
+            Pair.of(Climate.parameters(temperature, humidity, continentalness, erosion, Climate.Parameter.span(0.2F, 0.9F), weirdness, offset), biome)
+        );
+    }
+
+    private void addBottomBiome(
+        Consumer<Pair<Climate.ParameterPoint, ResourceKey<Biome>>> parameters,
+        Climate.Parameter temperature,
+        Climate.Parameter humidity,
+        Climate.Parameter continentalness,
+        Climate.Parameter erosion,
+        Climate.Parameter weirdness,
+        float offset,
+        ResourceKey<Biome> biome
+    ) {
+        parameters.accept(Pair.of(Climate.parameters(temperature, humidity, continentalness, erosion, Climate.Parameter.point(1.1F), weirdness, offset), biome));
+    }
+
+    public static boolean isDeepDarkRegion(DensityFunction erosion, DensityFunction depth, DensityFunction.FunctionContext pos) {
+        return erosion.compute(pos) < -0.225F && depth.compute(pos) > 0.9F;
+    }
+
+    public static String getDebugStringForPeaksAndValleys(double weirdness) {
+        if (weirdness < NoiseRouterData.peaksAndValleys(0.05F)) {
+            return "Valley";
+        } else if (weirdness < NoiseRouterData.peaksAndValleys(0.26666668F)) {
+            return "Low";
+        } else if (weirdness < NoiseRouterData.peaksAndValleys(0.4F)) {
+            return "Mid";
+        } else {
+            return weirdness < NoiseRouterData.peaksAndValleys(0.56666666F) ? "High" : "Peak";
+        }
+    }
+
+    public String getDebugStringForContinentalness(double continentalness) {
+        double d = Climate.quantizeCoord((float)continentalness);
+        if (d < this.mushroomFieldsContinentalness.max()) {
+            return "Mushroom fields";
+        } else if (d < this.deepOceanContinentalness.max()) {
+            return "Deep ocean";
+        } else if (d < this.oceanContinentalness.max()) {
+            return "Ocean";
+        } else if (d < this.coastContinentalness.max()) {
+            return "Coast";
+        } else if (d < this.nearInlandContinentalness.max()) {
+            return "Near inland";
+        } else {
+            return d < this.midInlandContinentalness.max() ? "Mid inland" : "Far inland";
+        }
+    }
+
+    public String getDebugStringForErosion(double erosion) {
+        return getDebugStringForNoiseValue(erosion, this.erosions);
+    }
+
+    public String getDebugStringForTemperature(double temperature) {
+        return getDebugStringForNoiseValue(temperature, this.temperatures);
+    }
+
+    public String getDebugStringForHumidity(double humidity) {
+        return getDebugStringForNoiseValue(humidity, this.humidities);
+    }
+
+    private static String getDebugStringForNoiseValue(double noisePoint, Climate.Parameter[] noiseRanges) {
+        double d = Climate.quantizeCoord((float)noisePoint);
+
+        for (int i = 0; i < noiseRanges.length; i++) {
+            if (d < noiseRanges[i].max()) {
+                return i + "";
+            }
+        }
+
+        return "?";
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getTemperatureThresholds() {
+        return this.temperatures;
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getHumidityThresholds() {
+        return this.humidities;
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getErosionThresholds() {
+        return this.erosions;
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getContinentalnessThresholds() {
+        return new Climate.Parameter[]{
+            this.mushroomFieldsContinentalness,
+            this.deepOceanContinentalness,
+            this.oceanContinentalness,
+            this.coastContinentalness,
+            this.nearInlandContinentalness,
+            this.midInlandContinentalness,
+            this.farInlandContinentalness
+        };
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getPeaksAndValleysThresholds() {
+        return new Climate.Parameter[]{
+            Climate.Parameter.span(-2.0F, NoiseRouterData.peaksAndValleys(0.05F)),
+            Climate.Parameter.span(NoiseRouterData.peaksAndValleys(0.05F), NoiseRouterData.peaksAndValleys(0.26666668F)),
+            Climate.Parameter.span(NoiseRouterData.peaksAndValleys(0.26666668F), NoiseRouterData.peaksAndValleys(0.4F)),
+            Climate.Parameter.span(NoiseRouterData.peaksAndValleys(0.4F), NoiseRouterData.peaksAndValleys(0.56666666F)),
+            Climate.Parameter.span(NoiseRouterData.peaksAndValleys(0.56666666F), 2.0F)
+        };
+    }
+
+    @VisibleForDebug
+    public Climate.Parameter[] getWeirdnessThresholds() {
+        return new Climate.Parameter[]{Climate.Parameter.span(-2.0F, 0.0F), Climate.Parameter.span(0.0F, 2.0F)};
+    }
+}
